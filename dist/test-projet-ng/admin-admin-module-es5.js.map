{"version":3,"sources":["src/app/admin/dashboard/dashboard.component.html","src/app/admin/login/login.component.html","src/app/admin/Admin.ts","src/app/admin/admin-routing.module.ts","src/app/admin/admin.module.ts","src/app/admin/admin.service.ts","src/app/admin/dashboard/dashboard.component.scss","src/app/admin/dashboard/dashboard.component.ts","src/app/admin/login/login.component.scss","src/app/admin/login/login.component.ts"],"names":[],"mappings":"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","sourcesContent":["export default \"<h2>{{pageTitle}}</h2>\\n  <table class=\\\"table  table-hover table-striped\\\" *ngIf=\\\"bars$ | async as bars; else loading\\\">\\n    <thead class=\\\"header_table\\\">\\n      <tr>\\n        <th scope=\\\"col\\\">Nom</th>\\n        <th scope=\\\"col\\\">Adresse</th>\\n        <th scope=\\\"col\\\">Action</th>\\n      </tr>\\n    </thead>\\n    <tbody>\\n      <tr *ngFor=\\\"let bar of bars\\\" >\\n        <td>{{bar.name}}</td>\\n        <td>{{bar.address}}</td>\\n      <td><button class=\\\"btn btn-success\\\" (click)=\\\"isValid(bar)\\\">Valider</button></td>\\n      </tr>\\n    </tbody>\\n  </table>\\n<ng-template #loading>\\n  <fbapp-loader center></fbapp-loader>\\n</ng-template>\\n\"","export default \"<div class=\\\"signup-content\\\">\\n  <div class=\\\"container\\\">\\n    <h2>{{pageTitle}}</h2>\\n    <form [formGroup]= \\\"FormLogin\\\" #formDir=\\\"ngForm\\\" (ngSubmit)=\\\"onSubmit(formDir)\\\">\\n\\n            <div [hidden]=\\\"formDir.submitted\\\">\\n            </div>\\n\\n              <div class=\\\"cross-validation\\\" [class.cross-validation-error]=\\\"(FormLogin.touched || FormLogin.dirty)\\\">\\n                <div class=\\\"form-group row\\\">\\n                  <div class=\\\"wrap-input100 validate-input \\\">\\n                    <span class=\\\"label-input100\\\">Email</span>\\n                    <input id=\\\"email\\\" class=\\\" input\\\" type=\\\"text\\\"\\n                    formControlName=\\\"email\\\"  required   placeholder=\\\"Email...\\\"   >\\n                    <div *ngIf=\\\"email.invalid && (email.dirty || email.touched)\\\"\\n                        class=\\\"alert alert-danger\\\">\\n\\n                      <div *ngIf=\\\"email.errors.required\\\">\\n                        Le champ email est obligatoire.\\n                      </div>\\n\\n                    </div>\\n                  </div>\\n                </div>\\n\\n                <div class=\\\"form-group row\\\">\\n                  <div class=\\\"wrap-input100 validate-input \\\">\\n                    <span class=\\\"label-input100\\\">Mot de passe</span>\\n\\n                    <input id=\\\"password\\\" type='password' class=\\\"input \\\"\\n                        formControlName=\\\"password\\\" required placeholder=\\\"******\\\">\\n\\n                    <div *ngIf=\\\"password.invalid && password.touched\\\" class=\\\"alert alert-danger password-errors\\\">\\n                      <div *ngIf=\\\"password.errors.required\\\">\\n                        Password n'est pas valable\\n                      </div>\\n                    </div>\\n                  </div>\\n                </div>\\n\\n              </div>\\n\\n\\n              <button type=\\\"submit\\\" class=\\\"btn btn-primary\\\"\\n                     [disabled]=\\\"FormLogin.invalid\\\">Se connecter</button>\\n              <button type=\\\"button\\\" class=\\\"btn btn-default\\\"\\n                     (click)=\\\"formDir.resetForm({})\\\">Annuler</button>\\n          </form>\\n          <!--\\n          <div class=\\\"submitted-message\\\" *ngIf=\\\"formDir.submitted\\\">\\n            <p>You've submitted your hero, {{ FormLogin.value.email }}!</p>\\n            <button (click)=\\\"formDir.resetForm({})\\\">Add new hero</button>\\n          </div>\\n\\n          -->\\n\\n    <p class=\\\"error\\\">{{ firstName$ | async }}</p>\\n  </div>\\n\\n</div>\\n\"","import { AdminShape } from './AdminShape';\r\n\r\nexport class Admin {\r\n  public constructor(\r\n    public readonly _id: number,\r\n    public readonly email: string,\r\n    public readonly password: string,\r\n    public readonly createDate: string,\r\n    public readonly deleteDate: Date,\r\n    public readonly token: string\r\n\r\n  ) {}\r\n\r\n  public static NEW(data: AdminShape): Admin {\r\n    return new Admin(data._id,data.email,data.password,data.createDate,data.deleteDate,data.token);\r\n  }\r\n\r\n  public static NEW_BUNCH(data: AdminShape[]): Admin[] {\r\n    return data.map(Admin.NEW);\r\n  }\r\n}\r\n","import { NgModule } from '@angular/core';\nimport { Routes, RouterModule } from '@angular/router';\nimport { LoginComponent } from './login/login.component';\nimport { DashboardComponent } from './dashboard/dashboard.component';\n\nconst routes: Routes = [ { path: 'login', component: LoginComponent },\n                          { path: 'dashboard', component: DashboardComponent },];\n\n@NgModule({\n  imports: [RouterModule.forChild(routes)],\n  exports: [RouterModule]\n})\nexport class AdminRoutingModule { }\n","import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { LoginComponent } from './login/login.component';\nimport { AdminRoutingModule } from './admin-routing.module';\nimport { FormsModule,ReactiveFormsModule }   from '@angular/forms';\nimport { DashboardComponent } from './dashboard/dashboard.component';\nimport { SharedModule } from '../shared/shared.module';\nimport { BarModule } from '../bar/bar.module';\n\n\n\n@NgModule({\n  declarations: [LoginComponent, DashboardComponent],\n  imports: [\n    CommonModule,\n    AdminRoutingModule,\n    FormsModule,\n    ReactiveFormsModule,\n    SharedModule,\n    BarModule\n\n\n  ]\n})\nexport class AdminModule { }\n","import { Injectable } from '@angular/core';\nimport { Observable, of } from 'rxjs';\nimport { switchMap, map, tap } from 'rxjs/operators';\nimport { AdminModel } from './AdminModel';\nimport { HttpClient } from '@angular/common/http';\nimport { Admin } from './Admin';\nimport { AdminShape } from './AdminShape';\n\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class AdminService {\n  private authenticatedAdmin!: Admin;\n  //uri = 'http://localhost:3000';\n  uri = 'https://projet-annuel-node.herokuapp.com';\n\n  public constructor(private readonly httpClient: HttpClient) {}\n\n  public get currentAdmin() {\n    return this.authenticatedAdmin=JSON.parse(localStorage.getItem('admin'));\n  }\n  public authenticate(email: string, password: string) {\n    const body = { email, password };\n    console.log(body);\n    return this.httpClient.post(`${this.uri}/api/auth/admins`, body).pipe(\n      map(Admin.NEW),\n      tap(admin => {\n        localStorage.setItem('admin', JSON.stringify(admin));\n        this.authenticatedAdmin = admin;\n      }));\n  }\n  public create(adminCreate: AdminModel) {\n    return this.httpClient.post(`${this.uri}/api/admins`, adminCreate);\n  }\n  public update(adminCreate: AdminModel,_id: number) {\n    return this.httpClient.patch<AdminShape>(`${this.uri}/api/admins/${_id}`, adminCreate)\n    .subscribe((admin) => {\n      return this.authenticatedAdmin = admin;\n    });\n  }\n\n  public logout(): void {\n            // remove admin from local storage and set current admin to null\n    localStorage.removeItem('admin');\n    this.authenticatedAdmin = null;\n  }\n\n\n}\n","export default \".header_table {\\n  background-color: #589442;\\n}\\n/*# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInNyYy9hcHAvYWRtaW4vZGFzaGJvYXJkL0M6XFxVc2Vyc1xcU3RlcGhhbmVcXERvY3VtZW50c1xcRVNHSVxcSlNcXEFuZ3VsYXJcXGZvb2Jhci9zcmNcXGFwcFxcYWRtaW5cXGRhc2hib2FyZFxcZGFzaGJvYXJkLmNvbXBvbmVudC5zY3NzIiwic3JjL2FwcC9hZG1pbi9kYXNoYm9hcmQvZGFzaGJvYXJkLmNvbXBvbmVudC5zY3NzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBO0VBQ0UseUJBQUE7QUNDRiIsImZpbGUiOiJzcmMvYXBwL2FkbWluL2Rhc2hib2FyZC9kYXNoYm9hcmQuY29tcG9uZW50LnNjc3MiLCJzb3VyY2VzQ29udGVudCI6WyIuaGVhZGVyX3RhYmxle1xyXG4gIGJhY2tncm91bmQtY29sb3I6IzU4OTQ0MjtcclxufVxyXG4iLCIuaGVhZGVyX3RhYmxlIHtcbiAgYmFja2dyb3VuZC1jb2xvcjogIzU4OTQ0Mjtcbn0iXX0= */\"","import { Component, OnInit } from '@angular/core';\nimport { Observable } from 'rxjs';\nimport { switchMap, map, tap } from 'rxjs/operators';\nimport {AdminService } from '../admin.service';\nimport { FbappPage } from 'src/app/shared/FbappPage';\nimport { BarService } from '../../bar/bar.service';\nimport { Bar} from '../../bar/Bar';\nimport { Router } from '@angular/router';\n\nimport { DataLoaderService } from 'src/app/shared/data-loader.service';\n\n\n@Component({\n  selector: 'fbapp-dashboard',\n  templateUrl: './dashboard.component.html',\n  styleUrls: ['./dashboard.component.scss'],\n  providers: [DataLoaderService],\n})\nexport class DashboardComponent implements OnInit {\n\n  public readonly pageTitle = 'Liste des bars en attente de validation';\n  public bars$: Observable<Bar[]>;\n\n  public filterInput!: string;\n  constructor(\n    private readonly barService: BarService,\n    private readonly barsLoaderService: DataLoaderService<Bar[]>,\n    private readonly adminService: AdminService,\n    private router: Router\n\n  ) { }\n\n  ngOnInit() {\n\n    this.initBarsLoader();\n\n    this.listBars();\n\n  }\n  public reset(): void {\n    this.barsLoaderService.reset();\n    this.filterInput = '';\n  }\n /* private initFavoriteCharaterId(): void {\n    const { currentUser } = this.userService;\n    if (currentUser) {\n      this.favoriteCharacterId = currentUser.favoriteCharacter;\n    }\n  }\n*/\n  private initBarsLoader(): void {\n    const bars$ = this.listBars();\n    this.barsLoaderService.init(bars$);\n    this.bars$ = this.barsLoaderService.stream$;\n  }\n\n  private listBars(): Observable<Bar[]>{\n\n    return this.barService.getListBarInvalide();\n  }\n  public isValid(bar:Bar){\n    //alert('ok');\n    this.bars$=this.barService.ValidateBar(bar);\n\n  }\n}\n\n\n\n","export default \"\\n/*# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IiIsImZpbGUiOiJzcmMvYXBwL2FkbWluL2xvZ2luL2xvZ2luLmNvbXBvbmVudC5zY3NzIn0= */\"","import { Component, OnInit, ViewChild, ElementRef } from '@angular/core';\nimport { FormControl, FormGroup, Validators } from '@angular/forms';\nimport { Router } from '@angular/router';\nimport { AdminService } from '../admin.service';\nimport { Observable, of } from 'rxjs';\nimport { catchError, map } from 'rxjs/operators';\nimport { HttpClient, HttpHeaders } from '@angular/common/http';\nimport { FbappPage } from 'src/app/shared/FbappPage';\nimport { NgForm } from '@angular/forms';\n\n\n@Component({\n  selector: 'fbapp-login',\n  templateUrl: './login.component.html',\n  styleUrls: ['./login.component.scss']\n})\nexport class LoginComponent implements OnInit,FbappPage {\n  public pageTitle = 'Se connecter (en tant qu\\'Admin)';\n  @ViewChild('login', { static: false }) loginInput: ElementRef;\n  public firstName$!: Observable<string>;\n  FormLogin: FormGroup;\n  constructor(private readonly adminService: AdminService,private readonly router: Router,private readonly http: HttpClient) { }\n\n  ngOnInit() : void {\n    this.FormLogin = new FormGroup({\n      'email': new FormControl('',[\n        Validators.required,\n        Validators.email,\n\n      ]),\n      'password': new FormControl('',[\n        Validators.required,\n      ]),\n    }); // <-- add custom validator at the FormGroup level\n  }\n  get email() { return this.FormLogin.get('email'); }\n\n  get password() { return this.FormLogin.get('password'); }\n  private goToHome(): void {\n    this.router.navigateByUrl('/admin/dashboard');\n  }\n  public onSubmit(formDir): void {\n\n    const { email, password } = formDir.value;\n    /*this.authService.authenticate(email, password).subscribe(admin=>{\n\n    })*/console.log(formDir.value);\n    this.firstName$=this.adminService.authenticate(email, password).pipe(\n      map((admin) => {\n        //localStorage.setItem(\"admin\",JSON.stringify(admin));\n        //localStorage.removeItem(\"admin\")\n        //localStorage.getItem(\"admin\")\n        console.log(admin);\n        this.goToHome();\n        return null;\n      }),\n      catchError(() => {\n        this.resetForm(formDir);\n        return of('Login failed');\n      }),\n    );\n  }\n  private resetForm(formDir: NgForm): void {\n    formDir.reset();\n    this.loginInput.nativeElement.focus();\n  }\n\n\n}\n\n"],"sourceRoot":"webpack:///","file":"admin-admin-module-es5.js"}